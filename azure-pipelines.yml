# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

stages:
- stage: 'Build_Test_Stage'
  jobs:
  - job: 'Build_Test'
    pool:
      vmImage: 'ubuntu-16.04'
    displayName: 'Test Xournal++ on Linux'
    steps:
    - bash: |
        sudo apt-get update
        sudo apt-get install -y cmake libcppunit-dev libgtk-3-dev libpoppler-glib-dev portaudio19-dev libsndfile-dev liblua5.3-dev libzip-dev
      displayName: 'Install dependencies'
    - bash: |
        mkdir build
      displayName: 'Create build directory'
    - bash: |
        cmake .. -DCMAKE_DEBUG_INCLUDES_LDFLAGS=ON -DENABLE_CPPUNIT=ON -DDEBUG_COMPILE=ON
        make -j `grep processor /proc/cpuinfo | tail -c 2`
      workingDirectory: ./build
      displayName: 'Build Xournal++'
    - bash: |
        ctest
      workingDirectory: ./Build
      displayName: 'Run tests'

- stage: Release
  jobs:
  - job: Linux
    pool:
      vmImage: 'ubuntu-16.04'
    displayName: 'Test Xournal++ on Linux'
    steps:
    - bash: |
        sudo apt-get update
        sudo apt-get install -y cmake libcppunit-dev libgtk-3-dev libpoppler-glib-dev portaudio19-dev libsndfile-dev liblua5.3-dev libzip-dev
      displayName: 'Install dependencies'
    - bash: |
        mkdir build
      displayName: 'Create build directory'
    - bash: |
        cmake ..
        make
      workingDirectory: ./build
      displayName: 'Build Xournal++'

  - job: Windows
    pool:
      vmImage: 'vs2017-win2016'
      x86_64:
        MSYSTEM: MINGW64
        MSYS2_ARCH: x86_64
    steps:
      - script: |
          choco install msys2 --params="/InstallDir:%CD:~0,2%\msys64 /NoUpdate /NoPath"
        displayName: 'Install MSYS2'
      - script: |
          pacman -Syuu --noconfirm
          pacman -S  --noconfirm mingw-w64-x86_64-cmake make mingw-w64-x86_64-toolchain
          pacman -S  --noconfirm --needed base-devel mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake
          pacman -S  --noconfirm mingw-w64-x86_64-poppler mingw-w64-x86_64-gtk3 mingw-w64-x86_64-libsndfile mingw-w64-x86_64-libzip
        env:
          MSYS2_ARCH: $(MSYS2_ARCH)
          MSYSTEM: $(MSYSTEM)
          CHERE_INVOKING: yes
        displayName: 'Install dependencies on Windows'
      - script: ./build-portaudio.sh
        workingDirectory: ./windows-setup
        env:
          MSYS2_ARCH: $(MSYS2_ARCH)
          MSYSTEM: $(MSYSTEM)
          CHERE_INVOKING: yes
        displayName: 'Build Portaudio'
      - script: |
          mkdir build
        displayName: 'Create build directory'
      - script: |
          cmake ..
          make
        workingDirectory: ./build
        env:
          MSYS2_ARCH: $(MSYS2_ARCH)
          MSYSTEM: $(MSYSTEM)
          CHERE_INVOKING: yes
        displayName: 'Build Xournal++'
      - script: |
          ./build-setup.sh
        workingDirectory: ./windows-setup
        env:
          MSYS2_ARCH: $(MSYS2_ARCH)
          MSYSTEM: $(MSYSTEM)
          CHERE_INVOKING: yes
        displayName: 'Create Setup'

  - job: macOS
    pool:
      vmImage: 'macOS-10.13'
    steps:
    - bash: |
        echo !!!TODO!!!
      displayName: 'Install dependencies on macOS'

#- stage: Deploy_Release
#  jobs:
#  - job: GitHub
